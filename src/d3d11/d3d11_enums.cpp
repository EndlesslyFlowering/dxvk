#include "d3d11_enums.h"

std::ostream& operator << (std::ostream& os, D3D_FEATURE_LEVEL e) {
  switch (e) {
    ENUM_NAME(D3D_FEATURE_LEVEL_9_1);
    ENUM_NAME(D3D_FEATURE_LEVEL_9_2);
    ENUM_NAME(D3D_FEATURE_LEVEL_9_3);
    ENUM_NAME(D3D_FEATURE_LEVEL_10_0);
    ENUM_NAME(D3D_FEATURE_LEVEL_10_1);
    ENUM_NAME(D3D_FEATURE_LEVEL_11_0);
    ENUM_NAME(D3D_FEATURE_LEVEL_11_1);
    ENUM_NAME(D3D_FEATURE_LEVEL_12_0);
    ENUM_NAME(D3D_FEATURE_LEVEL_12_1);
    ENUM_DEFAULT(e);
  }
}

std::ostream& operator << (std::ostream& os, D3D11_RESOURCE_DIMENSION e) {
  switch (e) {
    ENUM_NAME(D3D11_RESOURCE_DIMENSION_UNKNOWN);

    ENUM_NAME(D3D11_RESOURCE_DIMENSION_BUFFER);
    ENUM_NAME(D3D11_RESOURCE_DIMENSION_TEXTURE1D);
    ENUM_NAME(D3D11_RESOURCE_DIMENSION_TEXTURE2D);
    ENUM_NAME(D3D11_RESOURCE_DIMENSION_TEXTURE3D);

    ENUM_DEFAULT(e);
  }
}

std::ostream& operator << (std::ostream& os, D3D11_USAGE e) {
  switch (e) {
    ENUM_NAME(D3D11_USAGE_DEFAULT);
    ENUM_NAME(D3D11_USAGE_IMMUTABLE);
    ENUM_NAME(D3D11_USAGE_DYNAMIC);
    ENUM_NAME(D3D11_USAGE_STAGING);

    ENUM_DEFAULT(e);
  }
}

std::ostream& operator << (std::ostream& os, D3D11_RTV_DIMENSION e) {
  switch (e) {
    ENUM_NAME(D3D11_RTV_DIMENSION_UNKNOWN);

    ENUM_NAME(D3D11_RTV_DIMENSION_BUFFER);
    ENUM_NAME(D3D11_RTV_DIMENSION_TEXTURE1D);
    ENUM_NAME(D3D11_RTV_DIMENSION_TEXTURE1DARRAY);
    ENUM_NAME(D3D11_RTV_DIMENSION_TEXTURE2D);
    ENUM_NAME(D3D11_RTV_DIMENSION_TEXTURE2DARRAY);
    ENUM_NAME(D3D11_RTV_DIMENSION_TEXTURE2DMS);
    ENUM_NAME(D3D11_RTV_DIMENSION_TEXTURE2DMSARRAY);
    ENUM_NAME(D3D11_RTV_DIMENSION_TEXTURE3D);

    ENUM_DEFAULT(e);
  }
}


#define ENUM_NAME_FLAG(Flags, Flag) \
          if (Flags & Flag)  \
            strStr << #Flag << " | "

std::string enumerateD3d11BindFlags(UINT BindFlags) {
  std::stringstream strStr;

  strStr << static_cast<int32_t>(BindFlags) << ": ";

  ENUM_NAME_FLAG(BindFlags, D3D11_BIND_VERTEX_BUFFER);
  ENUM_NAME_FLAG(BindFlags, D3D11_BIND_INDEX_BUFFER);
  ENUM_NAME_FLAG(BindFlags, D3D11_BIND_CONSTANT_BUFFER);
  ENUM_NAME_FLAG(BindFlags, D3D11_BIND_SHADER_RESOURCE);
  ENUM_NAME_FLAG(BindFlags, D3D11_BIND_STREAM_OUTPUT);
  ENUM_NAME_FLAG(BindFlags, D3D11_BIND_RENDER_TARGET);
  ENUM_NAME_FLAG(BindFlags, D3D11_BIND_DEPTH_STENCIL);
  ENUM_NAME_FLAG(BindFlags, D3D11_BIND_UNORDERED_ACCESS);
  ENUM_NAME_FLAG(BindFlags, D3D11_BIND_DECODER);
  ENUM_NAME_FLAG(BindFlags, D3D11_BIND_VIDEO_ENCODER);

  std::string str = strStr.str();

  if (str.length() > 4) {
    str.resize(str.length() - 3);
  }
  else {
    str.append("none");
  }

  return str;
}

std::string enumerateD3d11MiscFlags(UINT MiscFlags) {
  std::stringstream strStr;

  strStr << static_cast<int32_t>(MiscFlags) << ": ";

  ENUM_NAME_FLAG(MiscFlags, D3D11_RESOURCE_MISC_GENERATE_MIPS);
  ENUM_NAME_FLAG(MiscFlags, D3D11_RESOURCE_MISC_SHARED);
  ENUM_NAME_FLAG(MiscFlags, D3D11_RESOURCE_MISC_TEXTURECUBE);
  ENUM_NAME_FLAG(MiscFlags, D3D11_RESOURCE_MISC_DRAWINDIRECT_ARGS);
  ENUM_NAME_FLAG(MiscFlags, D3D11_RESOURCE_MISC_BUFFER_ALLOW_RAW_VIEWS);
  ENUM_NAME_FLAG(MiscFlags, D3D11_RESOURCE_MISC_BUFFER_STRUCTURED);
  ENUM_NAME_FLAG(MiscFlags, D3D11_RESOURCE_MISC_RESOURCE_CLAMP);
  ENUM_NAME_FLAG(MiscFlags, D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX);
  ENUM_NAME_FLAG(MiscFlags, D3D11_RESOURCE_MISC_GDI_COMPATIBLE);
  ENUM_NAME_FLAG(MiscFlags, D3D11_RESOURCE_MISC_SHARED_NTHANDLE);
  ENUM_NAME_FLAG(MiscFlags, D3D11_RESOURCE_MISC_RESTRICTED_CONTENT);
  ENUM_NAME_FLAG(MiscFlags, D3D11_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE);
  ENUM_NAME_FLAG(MiscFlags, D3D11_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE_DRIVER);
  ENUM_NAME_FLAG(MiscFlags, D3D11_RESOURCE_MISC_GUARDED);
  ENUM_NAME_FLAG(MiscFlags, D3D11_RESOURCE_MISC_TILE_POOL);
  ENUM_NAME_FLAG(MiscFlags, D3D11_RESOURCE_MISC_TILED);
  ENUM_NAME_FLAG(MiscFlags, D3D11_RESOURCE_MISC_HW_PROTECTED);

  std::string str = strStr.str();

  if (str.length() > 4) {
    str.resize(str.length() - 3);
  }
  else {
    str.append("none");
  }

  return str;
}

#undef ENUM_NAME_FLAG
